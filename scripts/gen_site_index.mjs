#!/usr/bin/env node
/**
 * Generate a static contents index for the site/ folder.
 * - Scans site/ recursively (excluding assets/)
 * - Collects all *.html (except site/index.html)
 * - Extracts a title from <title> or <h1>
 * - Writes site/assets/contents.json with groups and a flat list
 */

import { promises as fs } from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const repoRoot = path.resolve(__dirname, "..");
const siteDir = path.join(repoRoot, "site");
const outFile = path.join(siteDir, "assets", "contents.json");
const outJsFile = path.join(siteDir, "assets", "contents.static.js");

function isHtml(file) {
  return file.toLowerCase().endsWith(".html");
}

async function walk(dir) {
  const entries = await fs.readdir(dir, { withFileTypes: true });
  const results = [];
  for (const ent of entries) {
    const full = path.join(dir, ent.name);
    const rel = path.relative(siteDir, full);
    // skip assets folder
    if (rel.split(path.sep)[0] === "assets") continue;
    if (ent.isDirectory()) {
      results.push(...(await walk(full)));
    } else if (ent.isFile() && isHtml(ent.name)) {
      // skip site/index.html only
      if (rel === "index.html") continue;
      results.push(full);
    }
  }
  return results;
}

function extractTitle(html, fallback) {
  const t = /<title>([^<]+)<\/title>/i.exec(html)?.[1];
  if (t) return t.trim();
  const h1 = /<h1[^>]*>([\s\S]*?)<\/h1>/i.exec(html)?.[1];
  if (h1) return h1.replace(/<[^>]*>/g, "").trim();
  return fallback;
}

function categorize(relPath) {
  const p = relPath.replace(/\\/g, "/").toLowerCase();
  if (p.startsWith("eds_premiere/")) return "EDS Première";
  if (p.startsWith("eds_terminale/")) return "EDS Terminale";
  if (p.startsWith("maths_expertes/")) return "Maths expertes";
  return "Autres";
}

async function main() {
  const files = await walk(siteDir);
  const items = [];
  for (const full of files) {
    const rel = path.relative(siteDir, full).replace(/\\/g, "/");
    const name = path.basename(full);
    const html = await fs.readFile(full, "utf8").catch(() => "");
    const title = extractTitle(html, rel);
    items.push({ title, url: rel, file: rel, name });
  }
  // group
  const groups = {
    "EDS Première": [],
    "EDS Terminale": [],
    "Maths expertes": [],
    Autres: [],
  };
  for (const it of items) {
    const g = categorize(it.file);
    groups[g].push({ title: it.title, url: it.url });
  }
  // sort titles in groups
  for (const k of Object.keys(groups)) {
    groups[k].sort((a, b) => a.title.localeCompare(b.title, "fr"));
  }
  const payload = {
    generatedAt: new Date().toISOString(),
    base: "site/",
    groups,
    all: items.sort((a, b) => a.url.localeCompare(b.url)),
  };
  await fs.mkdir(path.dirname(outFile), { recursive: true });
  await fs.writeFile(outFile, JSON.stringify(payload, null, 2), "utf8");
  await fs.writeFile(
    outJsFile,
    `// generated by scripts/gen_site_index.mjs\nwindow.__SITE_CONTENTS__ = ${JSON.stringify(payload)};\n`,
    "utf8"
  );
  console.log(`Wrote ${outFile} and ${outJsFile} with ${items.length} pages`);
}

main().catch((err) => {
  console.error(err);
  process.exit(1);
});
